
CREATE DATABASE SalesDB

USE SalesDB;


CREATE TABLE  salesman( 
	salesman_id INT PRIMARY KEY,
	[name] NVARCHAR(50) NOT NULL,
	 city NVARCHAR(50),
	 commission  FLOAT


)


CREATE TABLE customer (
	customer_id INT PRIMARY KEY,
	cust_name NVARCHAR(50),
	city NVARCHAR(50),
	grade INT,
	salesman_id INT
	FOREIGN KEY(salesman_id) REFERENCES salesman(salesman_id)
	
)


CREATE TABLE orders (
	ord_no INT PRIMARY KEY,
	purch_amt MONEY NOT NULL,
	 ord_date DATE NOT NULL,
	 customer_id INT NOT NULL,
	 salesman_id INT NOT NULL,
	 FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
	 FOREIGN KEY(salesman_id)  REFERENCES salesman (salesman_id)


)
UPDATE salesman SET commission = 15  WHERE salesman_id=6001
UPDATE salesman SET commission = 13  WHERE salesman_id=6002
UPDATE salesman SET commission = 11  WHERE salesman_id=6003
UPDATE salesman SET commission = 14  WHERE salesman_id=6004
UPDATE salesman SET commission = 13  WHERE salesman_id=6005
UPDATE salesman SET commission = 12  WHERE salesman_id=6006

INSERT INTO salesman (salesman_id,name,city,commission)
	VALUES (6001, 'Jay', 'New York', 0.15)
INSERT INTO salesman (salesman_id,name,city,commission)
	VALUES (6002, 'Neel', 'Paris', 0.13)
INSERT INTO salesman (salesman_id,name,city,commission)
	VALUES (6003, 'Pritesh', 'London', 0.11)
INSERT INTO salesman (salesman_id,name,city,commission)
	VALUES (6004, 'Love', 'Paris', 0.14)
INSERT INTO salesman (salesman_id,name,city,commission)
	VALUES (6005, 'Paras', 'Rome', 0.13)
INSERT INTO salesman (salesman_id,name,city,commission)
	VALUES (6006, 'Leela', 'San Fransisco', 0.12)




INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3001, 'Niraj', 'New York', 100, 6001)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3002, 'Brijesh', 'New York', 200, 6001)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3003, 'Garima', 'California', 200, 6002)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3004, 'Jesica', 'London', 300, 6002)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3005, 'Feni', 'Paris', 300, 6004)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3006, 'Krish', 'Berlin', 100, 6006)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3007, 'Jolly', 'Moscow', 200, 6005)
INSERT INTO customer (customer_id,cust_name,city,grade,salesman_id)
	VALUES (3008, 'Brijesha', 'London', NULL , 6003)


INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7001, 150.5, '2012-10-05', 3003, 6002)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7002, 270.65, '2012-09-10', 3008, 6003)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7003, 65.26, '2012-10-05', 3001, 6001)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7004, 110.5, '2012-08-17', 3006, 6006)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7005, 948.5, '2012-09-10', 3003, 6002)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7006, 2400.6, '2012-07-27', 3002, 6001)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7007, 5760, '2012-09-10', 3001, 6001)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7008, 1983.43, '2012-10-10', 3005, 6004)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7009, 2480.4, '2012-10-10', 3006, 6006)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES(7010, 250.45, '2012-06-27', 3004, 6002)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7011, 75.29, '2012-08-17', 3007, 6005)
INSERT INTO orders(ord_no,purch_amt,ord_date,customer_id,salesman_id)
	VALUES (7012, 3045.6, '2012-04-25', 3001, 6001)

	
	SELECT * FROM customer
	SELECT * FROM salesman
	SELECT * FROM orders

--  1. write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city

SELECT S.name AS salesperson , C.cust_name AS customer , C.city
FROM customer C INNER JOIN salesman S  ON C.city=S.city



--  2. write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city

SELECT O.ord_no,O.purch_amt,C.cust_name,C.city
FROM orders O INNER JOIN customer C ON O.customer_id = C.customer_id
WHERE O.purch_amt  BETWEEN 500 AND 2000


--  3. write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commissionSELECT C.cust_name,C.city,S.salesman_id,S.cityFROM salesman S INNER JOIN customer C ON S.salesman_id=C.salesman_id--  4. write a SQL query to find salespeople who received commissions of more than 12percent from the company. Return Customer Name, customer city, Salesman,commission. SELECT C.cust_name,C.city,S.name AS Salesman ,S.commissionFROM customer C INNER JOIN salesman S ON C.salesman_id = S.salesman_idWHERE S.commission >12-- 5. write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commissionSELECT C.cust_name,C.city AS [Customer City],S.name AS Salesman,S.city AS [Salesman City] ,S.commissionFROM customer C INNER JOIN salesman S ON C.salesman_id = S.salesman_idWHERE S.commission >12 AND C.city != S.city -- 6. write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commissionSELECT O.ord_no,O.ord_date,C.cust_name,C.grade,S.name AS Salesman,S.commissionFROM ((customer C INNER JOIN orders O ON C.customer_id = O.customer_id) INNER JOIN salesman S ON  S.salesman_id = O.salesman_id)-- 7.  . Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the relational rows are returned.SELECT O.* , C.cust_name as "customer name" , C.city as "customer city" , C.grade , S.name as "salesman name" , S.city as "salesman city" , S.commission
FROM ( (customer C INNER JOIN orders O ON C.customer_id = O.customer_id ) 
INNER JOIN salesman S ON S.salesman_id = O.salesman_id)





-- 8.   write a SQL query to display the customer name, customer city, grade, salesman, salesman city. The results should be sorted by ascending customer_id.SELECT C.cust_name,C.city AS [Customer City],C.grade,S.name AS Salesman , S.city AS [Salesman City]FROM customer C INNER JOIN salesman S ON C.salesman_id = S.salesman_idORDER BY C.customer_id ASC--  9.  write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending  customer_idSELECT C.cust_name,C.city AS [Customer City],C.grade,S.name AS Salesman ,S.city As salesmancityFROM customer C INNER JOIN salesman S ON C.salesman_id = S.salesman_id WHERE C.grade < 300ORDER BY C.customer_id ASC--  10.  Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not

SELECT C.cust_name AS [customer name],C.city AS [customer city] , O.ord_date AS "order date" , O.purch_amt AS [order amount]
FROM customer C LEFT OUTER JOIN orders O ON C.customer_id = O.customer_id
ORDER BY O.ord_date



--  11.  Write a SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves


SELECT C.cust_name AS [customer name] , C.city,O.ord_no AS "order number", O.ord_date,S.name AS "salesperson name", S.commission
FROM ((customer C LEFT OUTER JOIN orders O ON C.customer_id = O.customer_id )
LEFT OUTER JOIN salesman S ON C.salesman_id=S.salesman_id )



--   12.   Write a SQL statement to generate a list in ascending order of salespersons who work either for one or more customers or have not yet joined any of the customers


SELECT S.salesman_id,S.name AS "salesman name",C.cust_name,C.city AS "customer city",C.grade
FROM salesman S LEFT OUTER JOIN customer C ON S.salesman_id = C.salesman_id
ORDER BY S.name ASC



--   13. write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount.SELECT  S.name AS "salesperson", S.salesman_id,C.cust_name AS "customer name",C.city AS "customer city" , C.grade, O.ord_no AS "order number",O.ord_date AS "Order date" , O.purch_amt AS "order amount" FROM ((salesman S LEFT OUTER JOIN customer C ON S.salesman_id = C.salesman_id )LEFT OUTER JOIN orders O ON S.salesman_id = O.salesman_id ) --   14. Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customers. The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplierSELECT S.* ,  C.cust_name as "Customer Name", C.city as "Customer City", C.grade, O.ord_no, O.ord_date, O.purch_amtFROM ((salesman S LEFT OUTER JOIN customer C ON S.salesman_id = C.salesman_id )LEFT OUTER JOIN orders O ON S.salesman_id = O.salesman_id )WHERE O.purch_amt > 2000 AND C.grade IS NOT NULL--   15.  Write a SQL statement to generate a list of all the salesmen who either work for one or more customers or have yet to join any of them. The customer may have placed one or more orders at or above order amount 2000, and must have a grade, or he may not have placed any orders to the associated supplierSELECT S.* ,  C.cust_name as "Customer Name", C.city as "Customer City", C.grade, O.ord_no, O.ord_date, O.purch_amtFROM ((salesman S LEFT OUTER JOIN customer C ON S.salesman_id = C.salesman_id )LEFT OUTER JOIN orders O ON S.salesman_id = O.salesman_id )WHERE O.purch_amt > 2000 AND C.grade IS NOT NULL--   16.  Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade.SELECT C.cust_name AS "customer name", C.city, O.ord_no, O.ord_date,O.purch_amtFROM customer C FULL OUTER JOIN orders O ON C.customer_id = O.customer_id WHERE C.grade IS NOT NULL  --  17. Write a SQL query to combine each row of the salesman table with each row of the customer tableSELECT S.salesman_id , S.city AS "salesman city", S.name AS "salesman name" , S.commission , C.cust_name AS "customer name" , C.city AS "customer city" , C.grade , C.customer_id FROM salesman S CROSS JOIN customer C--  18. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for all customers and vice versa for that salesperson who belongs to that citySELECT S.salesman_id , S.city AS "salesman city", S.name AS "salesman name" , S.commission , C.cust_name AS "customer name" , C.city AS "customer city" , C.grade , C.customer_id FROM salesman S CROSS JOIN customer CWHERE S.city = C.city-- 19.   Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for every customer and vice versa for those salesmen who belong to a city and customers who require a grade
SELECT S.salesman_id , S.city AS "salesman city", S.name AS "salesman name" , S.commission , C.cust_name AS "customer name" , C.city AS "customer city" , C.grade , C.customer_id FROM salesman S CROSS JOIN customer CWHERE S.city = C.city AND C.grade IS NOT NULL-- 20.   Write a SQL statement to make a Cartesian product between salesman and customer i.e. each salesman will appear for all customers and vice versa for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own gradeSELECT S.salesman_id , S.city AS "salesman city", S.name AS "salesman name" , S.commission , C.cust_name AS "customer name" , C.city AS "customer city" , C.grade , C.customer_id FROM salesman S CROSS JOIN customer CWHERE S.city != C.city AND C.grade IS NOT NULL